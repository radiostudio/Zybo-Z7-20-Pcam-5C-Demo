-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_v_demosaic_0_0_Debayer is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    imgBayer_dout : IN STD_LOGIC_VECTOR (39 downto 0);
    imgBayer_empty_n : IN STD_LOGIC;
    imgBayer_read : OUT STD_LOGIC;
    imgRgb_din : OUT STD_LOGIC_VECTOR (119 downto 0);
    imgRgb_full_n : IN STD_LOGIC;
    imgRgb_write : OUT STD_LOGIC;
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0);
    bayerPhase_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    height_ap_vld : IN STD_LOGIC;
    width_ap_vld : IN STD_LOGIC;
    bayerPhase_read_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of system_v_demosaic_0_0_Debayer is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_A : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal DebayerG_U0_ap_start : STD_LOGIC;
    signal DebayerG_U0_ap_done : STD_LOGIC;
    signal DebayerG_U0_ap_continue : STD_LOGIC;
    signal DebayerG_U0_ap_idle : STD_LOGIC;
    signal DebayerG_U0_ap_ready : STD_LOGIC;
    signal DebayerG_U0_start_out : STD_LOGIC;
    signal DebayerG_U0_start_write : STD_LOGIC;
    signal DebayerG_U0_imgBayer_read : STD_LOGIC;
    signal DebayerG_U0_imgG_din : STD_LOGIC_VECTOR (119 downto 0);
    signal DebayerG_U0_imgG_write : STD_LOGIC;
    signal DebayerG_U0_bayerPhase_c9_din : STD_LOGIC_VECTOR (15 downto 0);
    signal DebayerG_U0_bayerPhase_c9_write : STD_LOGIC;
    signal DebayerRatBorBatR_U0_ap_start : STD_LOGIC;
    signal DebayerRatBorBatR_U0_ap_done : STD_LOGIC;
    signal DebayerRatBorBatR_U0_ap_continue : STD_LOGIC;
    signal DebayerRatBorBatR_U0_ap_idle : STD_LOGIC;
    signal DebayerRatBorBatR_U0_ap_ready : STD_LOGIC;
    signal DebayerRatBorBatR_U0_start_out : STD_LOGIC;
    signal DebayerRatBorBatR_U0_start_write : STD_LOGIC;
    signal DebayerRatBorBatR_U0_imgG_read : STD_LOGIC;
    signal DebayerRatBorBatR_U0_imgRB_din : STD_LOGIC_VECTOR (119 downto 0);
    signal DebayerRatBorBatR_U0_imgRB_write : STD_LOGIC;
    signal DebayerRatBorBatR_U0_height : STD_LOGIC_VECTOR (9 downto 0);
    signal DebayerRatBorBatR_U0_width : STD_LOGIC_VECTOR (9 downto 0);
    signal DebayerRatBorBatR_U0_bayerPhase_c9_read : STD_LOGIC;
    signal DebayerRatBorBatR_U0_bayerPhase_c_din : STD_LOGIC_VECTOR (15 downto 0);
    signal DebayerRatBorBatR_U0_bayerPhase_c_write : STD_LOGIC;
    signal DebayerRandBatG_U0_ap_start : STD_LOGIC;
    signal DebayerRandBatG_U0_ap_done : STD_LOGIC;
    signal DebayerRandBatG_U0_ap_continue : STD_LOGIC;
    signal DebayerRandBatG_U0_ap_idle : STD_LOGIC;
    signal DebayerRandBatG_U0_ap_ready : STD_LOGIC;
    signal DebayerRandBatG_U0_imgRB_read : STD_LOGIC;
    signal DebayerRandBatG_U0_imgRgb_din : STD_LOGIC_VECTOR (119 downto 0);
    signal DebayerRandBatG_U0_imgRgb_write : STD_LOGIC;
    signal DebayerRandBatG_U0_height : STD_LOGIC_VECTOR (9 downto 0);
    signal DebayerRandBatG_U0_width : STD_LOGIC_VECTOR (9 downto 0);
    signal DebayerRandBatG_U0_bayerPhase_c_read : STD_LOGIC;
    signal imgG_full_n : STD_LOGIC;
    signal imgG_dout : STD_LOGIC_VECTOR (119 downto 0);
    signal imgG_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal imgG_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal imgG_empty_n : STD_LOGIC;
    signal bayerPhase_c9_full_n : STD_LOGIC;
    signal bayerPhase_c9_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal bayerPhase_c9_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal bayerPhase_c9_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal bayerPhase_c9_empty_n : STD_LOGIC;
    signal imgRB_full_n : STD_LOGIC;
    signal imgRB_dout : STD_LOGIC_VECTOR (119 downto 0);
    signal imgRB_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal imgRB_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal imgRB_empty_n : STD_LOGIC;
    signal bayerPhase_c_full_n : STD_LOGIC;
    signal bayerPhase_c_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal bayerPhase_c_num_data_valid : STD_LOGIC_VECTOR (2 downto 0);
    signal bayerPhase_c_fifo_cap : STD_LOGIC_VECTOR (2 downto 0);
    signal bayerPhase_c_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_DebayerRatBorBatR_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_DebayerRatBorBatR_U0_full_n : STD_LOGIC;
    signal start_for_DebayerRatBorBatR_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_DebayerRatBorBatR_U0_empty_n : STD_LOGIC;
    signal start_for_DebayerRandBatG_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_DebayerRandBatG_U0_full_n : STD_LOGIC;
    signal start_for_DebayerRandBatG_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_DebayerRandBatG_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_v_demosaic_0_0_DebayerG IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        imgBayer_dout : IN STD_LOGIC_VECTOR (39 downto 0);
        imgBayer_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        imgBayer_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        imgBayer_empty_n : IN STD_LOGIC;
        imgBayer_read : OUT STD_LOGIC;
        imgG_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        imgG_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        imgG_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        imgG_full_n : IN STD_LOGIC;
        imgG_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        bayerPhase_read : IN STD_LOGIC_VECTOR (15 downto 0);
        bayerPhase_c9_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bayerPhase_c9_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        bayerPhase_c9_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        bayerPhase_c9_full_n : IN STD_LOGIC;
        bayerPhase_c9_write : OUT STD_LOGIC );
    end component;


    component system_v_demosaic_0_0_DebayerRatBorBatR IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        imgG_dout : IN STD_LOGIC_VECTOR (119 downto 0);
        imgG_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        imgG_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        imgG_empty_n : IN STD_LOGIC;
        imgG_read : OUT STD_LOGIC;
        imgRB_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        imgRB_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        imgRB_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        imgRB_full_n : IN STD_LOGIC;
        imgRB_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (9 downto 0);
        width : IN STD_LOGIC_VECTOR (9 downto 0);
        bayerPhase_c9_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bayerPhase_c9_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        bayerPhase_c9_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        bayerPhase_c9_empty_n : IN STD_LOGIC;
        bayerPhase_c9_read : OUT STD_LOGIC;
        bayerPhase_c_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        bayerPhase_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        bayerPhase_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        bayerPhase_c_full_n : IN STD_LOGIC;
        bayerPhase_c_write : OUT STD_LOGIC );
    end component;


    component system_v_demosaic_0_0_DebayerRandBatG IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgRB_dout : IN STD_LOGIC_VECTOR (119 downto 0);
        imgRB_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        imgRB_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        imgRB_empty_n : IN STD_LOGIC;
        imgRB_read : OUT STD_LOGIC;
        imgRgb_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        imgRgb_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        imgRgb_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        imgRgb_full_n : IN STD_LOGIC;
        imgRgb_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (9 downto 0);
        width : IN STD_LOGIC_VECTOR (9 downto 0);
        bayerPhase_c_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        bayerPhase_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        bayerPhase_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        bayerPhase_c_empty_n : IN STD_LOGIC;
        bayerPhase_c_read : OUT STD_LOGIC );
    end component;


    component system_v_demosaic_0_0_fifo_w120_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (119 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (119 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component system_v_demosaic_0_0_fifo_w16_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (2 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component system_v_demosaic_0_0_start_for_DebayerRatBorBatR_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component system_v_demosaic_0_0_start_for_DebayerRandBatG_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    DebayerG_U0 : component system_v_demosaic_0_0_DebayerG
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DebayerG_U0_ap_start,
        start_full_n => start_for_DebayerRatBorBatR_U0_full_n,
        ap_done => DebayerG_U0_ap_done,
        ap_continue => DebayerG_U0_ap_continue,
        ap_idle => DebayerG_U0_ap_idle,
        ap_ready => DebayerG_U0_ap_ready,
        start_out => DebayerG_U0_start_out,
        start_write => DebayerG_U0_start_write,
        imgBayer_dout => imgBayer_dout,
        imgBayer_num_data_valid => ap_const_lv3_0,
        imgBayer_fifo_cap => ap_const_lv3_0,
        imgBayer_empty_n => imgBayer_empty_n,
        imgBayer_read => DebayerG_U0_imgBayer_read,
        imgG_din => DebayerG_U0_imgG_din,
        imgG_num_data_valid => imgG_num_data_valid,
        imgG_fifo_cap => imgG_fifo_cap,
        imgG_full_n => imgG_full_n,
        imgG_write => DebayerG_U0_imgG_write,
        height => height,
        width => width,
        bayerPhase_read => bayerPhase_read,
        bayerPhase_c9_din => DebayerG_U0_bayerPhase_c9_din,
        bayerPhase_c9_num_data_valid => bayerPhase_c9_num_data_valid,
        bayerPhase_c9_fifo_cap => bayerPhase_c9_fifo_cap,
        bayerPhase_c9_full_n => bayerPhase_c9_full_n,
        bayerPhase_c9_write => DebayerG_U0_bayerPhase_c9_write);

    DebayerRatBorBatR_U0 : component system_v_demosaic_0_0_DebayerRatBorBatR
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DebayerRatBorBatR_U0_ap_start,
        start_full_n => start_for_DebayerRandBatG_U0_full_n,
        ap_done => DebayerRatBorBatR_U0_ap_done,
        ap_continue => DebayerRatBorBatR_U0_ap_continue,
        ap_idle => DebayerRatBorBatR_U0_ap_idle,
        ap_ready => DebayerRatBorBatR_U0_ap_ready,
        start_out => DebayerRatBorBatR_U0_start_out,
        start_write => DebayerRatBorBatR_U0_start_write,
        imgG_dout => imgG_dout,
        imgG_num_data_valid => imgG_num_data_valid,
        imgG_fifo_cap => imgG_fifo_cap,
        imgG_empty_n => imgG_empty_n,
        imgG_read => DebayerRatBorBatR_U0_imgG_read,
        imgRB_din => DebayerRatBorBatR_U0_imgRB_din,
        imgRB_num_data_valid => imgRB_num_data_valid,
        imgRB_fifo_cap => imgRB_fifo_cap,
        imgRB_full_n => imgRB_full_n,
        imgRB_write => DebayerRatBorBatR_U0_imgRB_write,
        height => DebayerRatBorBatR_U0_height,
        width => DebayerRatBorBatR_U0_width,
        bayerPhase_c9_dout => bayerPhase_c9_dout,
        bayerPhase_c9_num_data_valid => bayerPhase_c9_num_data_valid,
        bayerPhase_c9_fifo_cap => bayerPhase_c9_fifo_cap,
        bayerPhase_c9_empty_n => bayerPhase_c9_empty_n,
        bayerPhase_c9_read => DebayerRatBorBatR_U0_bayerPhase_c9_read,
        bayerPhase_c_din => DebayerRatBorBatR_U0_bayerPhase_c_din,
        bayerPhase_c_num_data_valid => bayerPhase_c_num_data_valid,
        bayerPhase_c_fifo_cap => bayerPhase_c_fifo_cap,
        bayerPhase_c_full_n => bayerPhase_c_full_n,
        bayerPhase_c_write => DebayerRatBorBatR_U0_bayerPhase_c_write);

    DebayerRandBatG_U0 : component system_v_demosaic_0_0_DebayerRandBatG
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => DebayerRandBatG_U0_ap_start,
        ap_done => DebayerRandBatG_U0_ap_done,
        ap_continue => DebayerRandBatG_U0_ap_continue,
        ap_idle => DebayerRandBatG_U0_ap_idle,
        ap_ready => DebayerRandBatG_U0_ap_ready,
        imgRB_dout => imgRB_dout,
        imgRB_num_data_valid => imgRB_num_data_valid,
        imgRB_fifo_cap => imgRB_fifo_cap,
        imgRB_empty_n => imgRB_empty_n,
        imgRB_read => DebayerRandBatG_U0_imgRB_read,
        imgRgb_din => DebayerRandBatG_U0_imgRgb_din,
        imgRgb_num_data_valid => ap_const_lv3_0,
        imgRgb_fifo_cap => ap_const_lv3_0,
        imgRgb_full_n => imgRgb_full_n,
        imgRgb_write => DebayerRandBatG_U0_imgRgb_write,
        height => DebayerRandBatG_U0_height,
        width => DebayerRandBatG_U0_width,
        bayerPhase_c_dout => bayerPhase_c_dout,
        bayerPhase_c_num_data_valid => bayerPhase_c_num_data_valid,
        bayerPhase_c_fifo_cap => bayerPhase_c_fifo_cap,
        bayerPhase_c_empty_n => bayerPhase_c_empty_n,
        bayerPhase_c_read => DebayerRandBatG_U0_bayerPhase_c_read);

    imgG_U : component system_v_demosaic_0_0_fifo_w120_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DebayerG_U0_imgG_din,
        if_full_n => imgG_full_n,
        if_write => DebayerG_U0_imgG_write,
        if_dout => imgG_dout,
        if_num_data_valid => imgG_num_data_valid,
        if_fifo_cap => imgG_fifo_cap,
        if_empty_n => imgG_empty_n,
        if_read => DebayerRatBorBatR_U0_imgG_read);

    bayerPhase_c9_U : component system_v_demosaic_0_0_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DebayerG_U0_bayerPhase_c9_din,
        if_full_n => bayerPhase_c9_full_n,
        if_write => DebayerG_U0_bayerPhase_c9_write,
        if_dout => bayerPhase_c9_dout,
        if_num_data_valid => bayerPhase_c9_num_data_valid,
        if_fifo_cap => bayerPhase_c9_fifo_cap,
        if_empty_n => bayerPhase_c9_empty_n,
        if_read => DebayerRatBorBatR_U0_bayerPhase_c9_read);

    imgRB_U : component system_v_demosaic_0_0_fifo_w120_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DebayerRatBorBatR_U0_imgRB_din,
        if_full_n => imgRB_full_n,
        if_write => DebayerRatBorBatR_U0_imgRB_write,
        if_dout => imgRB_dout,
        if_num_data_valid => imgRB_num_data_valid,
        if_fifo_cap => imgRB_fifo_cap,
        if_empty_n => imgRB_empty_n,
        if_read => DebayerRandBatG_U0_imgRB_read);

    bayerPhase_c_U : component system_v_demosaic_0_0_fifo_w16_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => DebayerRatBorBatR_U0_bayerPhase_c_din,
        if_full_n => bayerPhase_c_full_n,
        if_write => DebayerRatBorBatR_U0_bayerPhase_c_write,
        if_dout => bayerPhase_c_dout,
        if_num_data_valid => bayerPhase_c_num_data_valid,
        if_fifo_cap => bayerPhase_c_fifo_cap,
        if_empty_n => bayerPhase_c_empty_n,
        if_read => DebayerRandBatG_U0_bayerPhase_c_read);

    start_for_DebayerRatBorBatR_U0_U : component system_v_demosaic_0_0_start_for_DebayerRatBorBatR_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_DebayerRatBorBatR_U0_din,
        if_full_n => start_for_DebayerRatBorBatR_U0_full_n,
        if_write => DebayerG_U0_start_write,
        if_dout => start_for_DebayerRatBorBatR_U0_dout,
        if_empty_n => start_for_DebayerRatBorBatR_U0_empty_n,
        if_read => DebayerRatBorBatR_U0_ap_ready);

    start_for_DebayerRandBatG_U0_U : component system_v_demosaic_0_0_start_for_DebayerRandBatG_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_DebayerRandBatG_U0_din,
        if_full_n => start_for_DebayerRandBatG_U0_full_n,
        if_write => DebayerRatBorBatR_U0_start_write,
        if_dout => start_for_DebayerRandBatG_U0_dout,
        if_empty_n => start_for_DebayerRandBatG_U0_empty_n,
        if_read => DebayerRandBatG_U0_ap_ready);





    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    DebayerG_U0_ap_continue <= ap_const_logic_1;
    DebayerG_U0_ap_start <= real_start;
    DebayerRandBatG_U0_ap_continue <= ap_continue;
    DebayerRandBatG_U0_ap_start <= start_for_DebayerRandBatG_U0_empty_n;
    
    DebayerRandBatG_U0_height_proc : process(height)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+16 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+16 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable DebayerRandBatG_U0_height_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv16_0(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv16_A(4 - 1 downto 0);
        v0_cpy := height;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv16_A(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv16_0(4-1 downto 0)));
            for DebayerRandBatG_U0_height_i in 0 to 16-1 loop
                v0_cpy(DebayerRandBatG_U0_height_i) := height(16-1-DebayerRandBatG_U0_height_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        DebayerRandBatG_U0_height <= resvalue(10-1 downto 0);
    end process;

    
    DebayerRandBatG_U0_width_proc : process(width)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+16 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+16 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable DebayerRandBatG_U0_width_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv16_0(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv16_A(4 - 1 downto 0);
        v0_cpy := width;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv16_A(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv16_0(4-1 downto 0)));
            for DebayerRandBatG_U0_width_i in 0 to 16-1 loop
                v0_cpy(DebayerRandBatG_U0_width_i) := width(16-1-DebayerRandBatG_U0_width_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        DebayerRandBatG_U0_width <= resvalue(10-1 downto 0);
    end process;

    DebayerRatBorBatR_U0_ap_continue <= ap_const_logic_1;
    DebayerRatBorBatR_U0_ap_start <= start_for_DebayerRatBorBatR_U0_empty_n;
    
    DebayerRatBorBatR_U0_height_proc : process(height)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+16 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+16 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable DebayerRatBorBatR_U0_height_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv16_0(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv16_A(4 - 1 downto 0);
        v0_cpy := height;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv16_A(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv16_0(4-1 downto 0)));
            for DebayerRatBorBatR_U0_height_i in 0 to 16-1 loop
                v0_cpy(DebayerRatBorBatR_U0_height_i) := height(16-1-DebayerRatBorBatR_U0_height_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        DebayerRatBorBatR_U0_height <= resvalue(10-1 downto 0);
    end process;

    
    DebayerRatBorBatR_U0_width_proc : process(width)
    variable vlo_cpy : STD_LOGIC_VECTOR(16+16 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(16+16 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable DebayerRatBorBatR_U0_width_i : integer;
    variable section : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(16 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv16_0(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv16_A(4 - 1 downto 0);
        v0_cpy := width;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv16_A(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(16-1-unsigned(ap_const_lv16_0(4-1 downto 0)));
            for DebayerRatBorBatR_U0_width_i in 0 to 16-1 loop
                v0_cpy(DebayerRatBorBatR_U0_width_i) := width(16-1-DebayerRatBorBatR_U0_width_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(16-1 downto 0)))));
        res_mask := res_mask(16-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        DebayerRatBorBatR_U0_width <= resvalue(10-1 downto 0);
    end process;

    ap_done <= DebayerRandBatG_U0_ap_done;
    ap_idle <= (DebayerRatBorBatR_U0_ap_idle and DebayerRandBatG_U0_ap_idle and DebayerG_U0_ap_idle);
    ap_ready <= DebayerG_U0_ap_ready;
    ap_sync_ready <= DebayerG_U0_ap_ready;
    imgBayer_read <= DebayerG_U0_imgBayer_read;
    imgRgb_din <= DebayerRandBatG_U0_imgRgb_din;
    imgRgb_write <= DebayerRandBatG_U0_imgRgb_write;
    internal_ap_ready <= ap_sync_ready;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_for_DebayerRandBatG_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_DebayerRatBorBatR_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
