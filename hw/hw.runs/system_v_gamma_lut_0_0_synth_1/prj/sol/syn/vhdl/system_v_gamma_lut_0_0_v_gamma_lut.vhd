-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_v_gamma_lut_0_0_v_gamma_lut is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 13;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    s_axis_video_TDATA : IN STD_LOGIC_VECTOR (119 downto 0);
    s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (14 downto 0);
    s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (14 downto 0);
    s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (119 downto 0);
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (14 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (14 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axis_video_TVALID : IN STD_LOGIC;
    s_axis_video_TREADY : OUT STD_LOGIC;
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC );
end;


architecture behav of system_v_gamma_lut_0_0_v_gamma_lut is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "system_v_gamma_lut_0_0_v_gamma_lut,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.091000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=29,HLS_SYN_DSP=0,HLS_SYN_FF=1452,HLS_SYN_LUT=1935,HLS_VERSION=2023_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal video_format : STD_LOGIC_VECTOR (15 downto 0);
    signal gamma_lut_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal gamma_lut_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal gamma_lut_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_start : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_done : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_continue : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_idle : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_ap_ready : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_s_axis_video_TREADY : STD_LOGIC;
    signal AXIvideo2MultiPixStream_U0_imgRgb_din : STD_LOGIC_VECTOR (119 downto 0);
    signal AXIvideo2MultiPixStream_U0_imgRgb_write : STD_LOGIC;
    signal Gamma_U0_ap_start : STD_LOGIC;
    signal Gamma_U0_ap_done : STD_LOGIC;
    signal Gamma_U0_ap_continue : STD_LOGIC;
    signal Gamma_U0_ap_idle : STD_LOGIC;
    signal Gamma_U0_ap_ready : STD_LOGIC;
    signal Gamma_U0_start_out : STD_LOGIC;
    signal Gamma_U0_start_write : STD_LOGIC;
    signal Gamma_U0_imgRgb_read : STD_LOGIC;
    signal Gamma_U0_imgGamma_din : STD_LOGIC_VECTOR (119 downto 0);
    signal Gamma_U0_imgGamma_write : STD_LOGIC;
    signal Gamma_U0_gamma_lut_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Gamma_U0_gamma_lut_0_ce0 : STD_LOGIC;
    signal Gamma_U0_gamma_lut_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Gamma_U0_gamma_lut_1_ce0 : STD_LOGIC;
    signal Gamma_U0_gamma_lut_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Gamma_U0_gamma_lut_2_ce0 : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_start : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_done : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_imgGamma_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDATA : STD_LOGIC_VECTOR (119 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TVALID : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP : STD_LOGIC_VECTOR (14 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB : STD_LOGIC_VECTOR (14 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal imgRgb_full_n : STD_LOGIC;
    signal imgRgb_dout : STD_LOGIC_VECTOR (119 downto 0);
    signal imgRgb_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal imgRgb_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal imgRgb_empty_n : STD_LOGIC;
    signal imgGamma_full_n : STD_LOGIC;
    signal imgGamma_dout : STD_LOGIC_VECTOR (119 downto 0);
    signal imgGamma_num_data_valid : STD_LOGIC_VECTOR (4 downto 0);
    signal imgGamma_fifo_cap : STD_LOGIC_VECTOR (4 downto 0);
    signal imgGamma_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_AXIvideo2MultiPixStream_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_AXIvideo2MultiPixStream_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_Gamma_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Gamma_U0_ap_ready : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_v_gamma_lut_0_0_AXIvideo2MultiPixStream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_axis_video_TDATA : IN STD_LOGIC_VECTOR (119 downto 0);
        s_axis_video_TVALID : IN STD_LOGIC;
        s_axis_video_TREADY : OUT STD_LOGIC;
        s_axis_video_TKEEP : IN STD_LOGIC_VECTOR (14 downto 0);
        s_axis_video_TSTRB : IN STD_LOGIC_VECTOR (14 downto 0);
        s_axis_video_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        s_axis_video_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        imgRgb_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        imgRgb_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        imgRgb_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        imgRgb_full_n : IN STD_LOGIC;
        imgRgb_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component system_v_gamma_lut_0_0_Gamma IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        imgRgb_dout : IN STD_LOGIC_VECTOR (119 downto 0);
        imgRgb_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        imgRgb_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        imgRgb_empty_n : IN STD_LOGIC;
        imgRgb_read : OUT STD_LOGIC;
        imgGamma_din : OUT STD_LOGIC_VECTOR (119 downto 0);
        imgGamma_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        imgGamma_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        imgGamma_full_n : IN STD_LOGIC;
        imgGamma_write : OUT STD_LOGIC;
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        gamma_lut_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        gamma_lut_0_ce0 : OUT STD_LOGIC;
        gamma_lut_0_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        gamma_lut_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        gamma_lut_1_ce0 : OUT STD_LOGIC;
        gamma_lut_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        gamma_lut_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        gamma_lut_2_ce0 : OUT STD_LOGIC;
        gamma_lut_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component system_v_gamma_lut_0_0_MultiPixStream2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        imgGamma_dout : IN STD_LOGIC_VECTOR (119 downto 0);
        imgGamma_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        imgGamma_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        imgGamma_empty_n : IN STD_LOGIC;
        imgGamma_read : OUT STD_LOGIC;
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (119 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (14 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (14 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component system_v_gamma_lut_0_0_fifo_w120_d16_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (119 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (119 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (4 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component system_v_gamma_lut_0_0_start_for_MultiPixStream2AXIvideo_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component system_v_gamma_lut_0_0_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        video_format : OUT STD_LOGIC_VECTOR (15 downto 0);
        gamma_lut_0_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        gamma_lut_0_ce0 : IN STD_LOGIC;
        gamma_lut_0_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        gamma_lut_1_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        gamma_lut_1_ce0 : IN STD_LOGIC;
        gamma_lut_1_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        gamma_lut_2_address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        gamma_lut_2_ce0 : IN STD_LOGIC;
        gamma_lut_2_q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    CTRL_s_axi_U : component system_v_gamma_lut_0_0_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        width => width,
        height => height,
        video_format => video_format,
        gamma_lut_0_address0 => Gamma_U0_gamma_lut_0_address0,
        gamma_lut_0_ce0 => Gamma_U0_gamma_lut_0_ce0,
        gamma_lut_0_q0 => gamma_lut_0_q0,
        gamma_lut_1_address0 => Gamma_U0_gamma_lut_1_address0,
        gamma_lut_1_ce0 => Gamma_U0_gamma_lut_1_ce0,
        gamma_lut_1_q0 => gamma_lut_1_q0,
        gamma_lut_2_address0 => Gamma_U0_gamma_lut_2_address0,
        gamma_lut_2_ce0 => Gamma_U0_gamma_lut_2_ce0,
        gamma_lut_2_q0 => gamma_lut_2_q0,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    AXIvideo2MultiPixStream_U0 : component system_v_gamma_lut_0_0_AXIvideo2MultiPixStream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => AXIvideo2MultiPixStream_U0_ap_start,
        ap_done => AXIvideo2MultiPixStream_U0_ap_done,
        ap_continue => AXIvideo2MultiPixStream_U0_ap_continue,
        ap_idle => AXIvideo2MultiPixStream_U0_ap_idle,
        ap_ready => AXIvideo2MultiPixStream_U0_ap_ready,
        s_axis_video_TDATA => s_axis_video_TDATA,
        s_axis_video_TVALID => s_axis_video_TVALID,
        s_axis_video_TREADY => AXIvideo2MultiPixStream_U0_s_axis_video_TREADY,
        s_axis_video_TKEEP => s_axis_video_TKEEP,
        s_axis_video_TSTRB => s_axis_video_TSTRB,
        s_axis_video_TUSER => s_axis_video_TUSER,
        s_axis_video_TLAST => s_axis_video_TLAST,
        s_axis_video_TID => s_axis_video_TID,
        s_axis_video_TDEST => s_axis_video_TDEST,
        imgRgb_din => AXIvideo2MultiPixStream_U0_imgRgb_din,
        imgRgb_num_data_valid => imgRgb_num_data_valid,
        imgRgb_fifo_cap => imgRgb_fifo_cap,
        imgRgb_full_n => imgRgb_full_n,
        imgRgb_write => AXIvideo2MultiPixStream_U0_imgRgb_write,
        height => height,
        width => width);

    Gamma_U0 : component system_v_gamma_lut_0_0_Gamma
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Gamma_U0_ap_start,
        start_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        ap_done => Gamma_U0_ap_done,
        ap_continue => Gamma_U0_ap_continue,
        ap_idle => Gamma_U0_ap_idle,
        ap_ready => Gamma_U0_ap_ready,
        start_out => Gamma_U0_start_out,
        start_write => Gamma_U0_start_write,
        imgRgb_dout => imgRgb_dout,
        imgRgb_num_data_valid => imgRgb_num_data_valid,
        imgRgb_fifo_cap => imgRgb_fifo_cap,
        imgRgb_empty_n => imgRgb_empty_n,
        imgRgb_read => Gamma_U0_imgRgb_read,
        imgGamma_din => Gamma_U0_imgGamma_din,
        imgGamma_num_data_valid => imgGamma_num_data_valid,
        imgGamma_fifo_cap => imgGamma_fifo_cap,
        imgGamma_full_n => imgGamma_full_n,
        imgGamma_write => Gamma_U0_imgGamma_write,
        width => width,
        height => height,
        gamma_lut_0_address0 => Gamma_U0_gamma_lut_0_address0,
        gamma_lut_0_ce0 => Gamma_U0_gamma_lut_0_ce0,
        gamma_lut_0_q0 => gamma_lut_0_q0,
        gamma_lut_1_address0 => Gamma_U0_gamma_lut_1_address0,
        gamma_lut_1_ce0 => Gamma_U0_gamma_lut_1_ce0,
        gamma_lut_1_q0 => gamma_lut_1_q0,
        gamma_lut_2_address0 => Gamma_U0_gamma_lut_2_address0,
        gamma_lut_2_ce0 => Gamma_U0_gamma_lut_2_ce0,
        gamma_lut_2_q0 => gamma_lut_2_q0);

    MultiPixStream2AXIvideo_U0 : component system_v_gamma_lut_0_0_MultiPixStream2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => MultiPixStream2AXIvideo_U0_ap_start,
        ap_done => MultiPixStream2AXIvideo_U0_ap_done,
        ap_continue => MultiPixStream2AXIvideo_U0_ap_continue,
        ap_idle => MultiPixStream2AXIvideo_U0_ap_idle,
        ap_ready => MultiPixStream2AXIvideo_U0_ap_ready,
        imgGamma_dout => imgGamma_dout,
        imgGamma_num_data_valid => imgGamma_num_data_valid,
        imgGamma_fifo_cap => imgGamma_fifo_cap,
        imgGamma_empty_n => imgGamma_empty_n,
        imgGamma_read => MultiPixStream2AXIvideo_U0_imgGamma_read,
        m_axis_video_TDATA => MultiPixStream2AXIvideo_U0_m_axis_video_TDATA,
        m_axis_video_TVALID => MultiPixStream2AXIvideo_U0_m_axis_video_TVALID,
        m_axis_video_TREADY => m_axis_video_TREADY,
        m_axis_video_TKEEP => MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP,
        m_axis_video_TSTRB => MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB,
        m_axis_video_TUSER => MultiPixStream2AXIvideo_U0_m_axis_video_TUSER,
        m_axis_video_TLAST => MultiPixStream2AXIvideo_U0_m_axis_video_TLAST,
        m_axis_video_TID => MultiPixStream2AXIvideo_U0_m_axis_video_TID,
        m_axis_video_TDEST => MultiPixStream2AXIvideo_U0_m_axis_video_TDEST,
        height => height,
        width => width);

    imgRgb_U : component system_v_gamma_lut_0_0_fifo_w120_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => AXIvideo2MultiPixStream_U0_imgRgb_din,
        if_full_n => imgRgb_full_n,
        if_write => AXIvideo2MultiPixStream_U0_imgRgb_write,
        if_dout => imgRgb_dout,
        if_num_data_valid => imgRgb_num_data_valid,
        if_fifo_cap => imgRgb_fifo_cap,
        if_empty_n => imgRgb_empty_n,
        if_read => Gamma_U0_imgRgb_read);

    imgGamma_U : component system_v_gamma_lut_0_0_fifo_w120_d16_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Gamma_U0_imgGamma_din,
        if_full_n => imgGamma_full_n,
        if_write => Gamma_U0_imgGamma_write,
        if_dout => imgGamma_dout,
        if_num_data_valid => imgGamma_num_data_valid,
        if_fifo_cap => imgGamma_fifo_cap,
        if_empty_n => imgGamma_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_imgGamma_read);

    start_for_MultiPixStream2AXIvideo_U0_U : component system_v_gamma_lut_0_0_start_for_MultiPixStream2AXIvideo_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_MultiPixStream2AXIvideo_U0_din,
        if_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        if_write => Gamma_U0_start_write,
        if_dout => start_for_MultiPixStream2AXIvideo_U0_dout,
        if_empty_n => start_for_MultiPixStream2AXIvideo_U0_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_ap_ready);





    ap_sync_reg_AXIvideo2MultiPixStream_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_AXIvideo2MultiPixStream_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_AXIvideo2MultiPixStream_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_AXIvideo2MultiPixStream_U0_ap_ready <= ap_sync_AXIvideo2MultiPixStream_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Gamma_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Gamma_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Gamma_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Gamma_U0_ap_ready <= ap_sync_Gamma_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    AXIvideo2MultiPixStream_U0_ap_continue <= ap_const_logic_1;
    AXIvideo2MultiPixStream_U0_ap_start <= ((ap_sync_reg_AXIvideo2MultiPixStream_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Gamma_U0_ap_continue <= ap_const_logic_1;
    Gamma_U0_ap_start <= ((ap_sync_reg_Gamma_U0_ap_ready xor ap_const_logic_1) and ap_start);
    MultiPixStream2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    MultiPixStream2AXIvideo_U0_ap_start <= start_for_MultiPixStream2AXIvideo_U0_empty_n;
    ap_done <= MultiPixStream2AXIvideo_U0_ap_done;
    ap_idle <= (MultiPixStream2AXIvideo_U0_ap_idle and Gamma_U0_ap_idle and AXIvideo2MultiPixStream_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_AXIvideo2MultiPixStream_U0_ap_ready <= (ap_sync_reg_AXIvideo2MultiPixStream_U0_ap_ready or AXIvideo2MultiPixStream_U0_ap_ready);
    ap_sync_Gamma_U0_ap_ready <= (ap_sync_reg_Gamma_U0_ap_ready or Gamma_U0_ap_ready);
    ap_sync_ready <= (ap_sync_Gamma_U0_ap_ready and ap_sync_AXIvideo2MultiPixStream_U0_ap_ready);
    m_axis_video_TDATA <= MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;
    m_axis_video_TDEST <= MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;
    m_axis_video_TID <= MultiPixStream2AXIvideo_U0_m_axis_video_TID;
    m_axis_video_TKEEP <= MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;
    m_axis_video_TLAST <= MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;
    m_axis_video_TSTRB <= MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;
    m_axis_video_TUSER <= MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;
    m_axis_video_TVALID <= MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;
    s_axis_video_TREADY <= AXIvideo2MultiPixStream_U0_s_axis_video_TREADY;
    start_for_MultiPixStream2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
