-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity system_v_gamma_lut_0_0_Gamma_Pipeline_VITIS_LOOP_327_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    imgRgb_dout : IN STD_LOGIC_VECTOR (119 downto 0);
    imgRgb_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    imgRgb_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    imgRgb_empty_n : IN STD_LOGIC;
    imgRgb_read : OUT STD_LOGIC;
    imgGamma_din : OUT STD_LOGIC_VECTOR (119 downto 0);
    imgGamma_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    imgGamma_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    imgGamma_full_n : IN STD_LOGIC;
    imgGamma_write : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_1_ce0 : OUT STD_LOGIC;
    lut_1_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_2_ce0 : OUT STD_LOGIC;
    lut_2_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_0_ce0 : OUT STD_LOGIC;
    lut_0_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_1_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_1_1_ce0 : OUT STD_LOGIC;
    lut_1_1_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_2_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_2_1_ce0 : OUT STD_LOGIC;
    lut_2_1_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_0_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_0_1_ce0 : OUT STD_LOGIC;
    lut_0_1_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_1_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_1_2_ce0 : OUT STD_LOGIC;
    lut_1_2_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_2_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_2_2_ce0 : OUT STD_LOGIC;
    lut_2_2_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_0_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_0_2_ce0 : OUT STD_LOGIC;
    lut_0_2_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_1_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_1_3_ce0 : OUT STD_LOGIC;
    lut_1_3_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_2_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_2_3_ce0 : OUT STD_LOGIC;
    lut_2_3_q0 : IN STD_LOGIC_VECTOR (9 downto 0);
    lut_0_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    lut_0_3_ce0 : OUT STD_LOGIC;
    lut_0_3_q0 : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of system_v_gamma_lut_0_0_Gamma_Pipeline_VITIS_LOOP_327_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln327_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal imgRgb_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal imgGamma_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal g_fu_320_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_reg_510 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_reg_515 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_reg_520 : STD_LOGIC_VECTOR (9 downto 0);
    signal g_1_reg_525 : STD_LOGIC_VECTOR (9 downto 0);
    signal b_1_reg_530 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_1_reg_535 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_reg_540 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_545 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_550 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_reg_555 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_560 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_565 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_1_load_reg_630 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_2_load_reg_635 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_0_load_reg_640 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_1_1_load_reg_645 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_2_1_load_reg_650 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_0_1_load_reg_655 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_1_2_load_reg_660 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_2_2_load_reg_665 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_0_2_load_reg_670 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_1_3_load_reg_675 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_2_3_load_reg_680 : STD_LOGIC_VECTOR (9 downto 0);
    signal lut_0_3_load_reg_685 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln341_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_fu_438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln343_fu_442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln341_1_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_1_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln343_1_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln341_2_fu_458_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_2_fu_462_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln343_2_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln341_3_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln342_3_fu_474_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln343_3_fu_478_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_fu_116 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal x_3_fu_309_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component system_v_gamma_lut_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component system_v_gamma_lut_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    x_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln327_fu_303_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_116 <= x_3_fu_309_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_116 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                b_1_reg_530 <= imgRgb_dout(49 downto 40);
                b_reg_515 <= imgRgb_dout(19 downto 10);
                g_1_reg_525 <= imgRgb_dout(39 downto 30);
                g_reg_510 <= g_fu_320_p1;
                r_1_reg_535 <= imgRgb_dout(59 downto 50);
                r_reg_520 <= imgRgb_dout(29 downto 20);
                tmp_1_reg_545 <= imgRgb_dout(79 downto 70);
                tmp_2_reg_550 <= imgRgb_dout(89 downto 80);
                tmp_3_reg_555 <= imgRgb_dout(99 downto 90);
                tmp_4_reg_560 <= imgRgb_dout(109 downto 100);
                tmp_5_reg_565 <= imgRgb_dout(119 downto 110);
                tmp_reg_540 <= imgRgb_dout(69 downto 60);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                lut_0_1_load_reg_655 <= lut_0_1_q0;
                lut_0_2_load_reg_670 <= lut_0_2_q0;
                lut_0_3_load_reg_685 <= lut_0_3_q0;
                lut_0_load_reg_640 <= lut_0_q0;
                lut_1_1_load_reg_645 <= lut_1_1_q0;
                lut_1_2_load_reg_660 <= lut_1_2_q0;
                lut_1_3_load_reg_675 <= lut_1_3_q0;
                lut_1_load_reg_630 <= lut_1_q0;
                lut_2_1_load_reg_650 <= lut_2_1_q0;
                lut_2_2_load_reg_665 <= lut_2_2_q0;
                lut_2_3_load_reg_680 <= lut_2_3_q0;
                lut_2_load_reg_635 <= lut_2_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_state2_pp0_stage0_iter1, ap_block_state5_pp0_stage0_iter4)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(imgRgb_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (imgRgb_empty_n = ap_const_logic_0);
    end process;


    ap_block_state5_pp0_stage0_iter4_assign_proc : process(imgGamma_full_n)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (imgGamma_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln327_fu_303_p2)
    begin
        if (((icmp_ln327_fu_303_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_116, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_2 <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_x_2 <= x_fu_116;
        end if; 
    end process;

    g_fu_320_p1 <= imgRgb_dout(10 - 1 downto 0);
    icmp_ln327_fu_303_p2 <= "1" when (unsigned(ap_sig_allocacmp_x_2) < unsigned(empty)) else "0";

    imgGamma_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, imgGamma_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            imgGamma_blk_n <= imgGamma_full_n;
        else 
            imgGamma_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    imgGamma_din <= (((((((((((lut_0_3_load_reg_685 & lut_2_3_load_reg_680) & lut_1_3_load_reg_675) & lut_0_2_load_reg_670) & lut_2_2_load_reg_665) & lut_1_2_load_reg_660) & lut_0_1_load_reg_655) & lut_2_1_load_reg_650) & lut_1_1_load_reg_645) & lut_0_load_reg_640) & lut_2_load_reg_635) & lut_1_load_reg_630);

    imgGamma_write_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            imgGamma_write <= ap_const_logic_1;
        else 
            imgGamma_write <= ap_const_logic_0;
        end if; 
    end process;


    imgRgb_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, imgRgb_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgRgb_blk_n <= imgRgb_empty_n;
        else 
            imgRgb_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imgRgb_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            imgRgb_read <= ap_const_logic_1;
        else 
            imgRgb_read <= ap_const_logic_0;
        end if; 
    end process;

    lut_0_1_address0 <= zext_ln343_1_fu_454_p1(10 - 1 downto 0);

    lut_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_0_1_ce0 <= ap_const_logic_1;
        else 
            lut_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_0_2_address0 <= zext_ln343_2_fu_466_p1(10 - 1 downto 0);

    lut_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_0_2_ce0 <= ap_const_logic_1;
        else 
            lut_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_0_3_address0 <= zext_ln343_3_fu_478_p1(10 - 1 downto 0);

    lut_0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_0_3_ce0 <= ap_const_logic_1;
        else 
            lut_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_0_address0 <= zext_ln343_fu_442_p1(10 - 1 downto 0);

    lut_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_0_ce0 <= ap_const_logic_1;
        else 
            lut_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_1_address0 <= zext_ln341_1_fu_446_p1(10 - 1 downto 0);

    lut_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_1_1_ce0 <= ap_const_logic_1;
        else 
            lut_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_2_address0 <= zext_ln341_2_fu_458_p1(10 - 1 downto 0);

    lut_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_1_2_ce0 <= ap_const_logic_1;
        else 
            lut_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_3_address0 <= zext_ln341_3_fu_470_p1(10 - 1 downto 0);

    lut_1_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_1_3_ce0 <= ap_const_logic_1;
        else 
            lut_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_1_address0 <= zext_ln341_fu_434_p1(10 - 1 downto 0);

    lut_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_1_ce0 <= ap_const_logic_1;
        else 
            lut_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_1_address0 <= zext_ln342_1_fu_450_p1(10 - 1 downto 0);

    lut_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_2_1_ce0 <= ap_const_logic_1;
        else 
            lut_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_2_address0 <= zext_ln342_2_fu_462_p1(10 - 1 downto 0);

    lut_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_2_2_ce0 <= ap_const_logic_1;
        else 
            lut_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_3_address0 <= zext_ln342_3_fu_474_p1(10 - 1 downto 0);

    lut_2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_2_3_ce0 <= ap_const_logic_1;
        else 
            lut_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lut_2_address0 <= zext_ln342_fu_438_p1(10 - 1 downto 0);

    lut_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            lut_2_ce0 <= ap_const_logic_1;
        else 
            lut_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x_3_fu_309_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_2) + unsigned(ap_const_lv10_4));
    zext_ln341_1_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_1_reg_525),64));
    zext_ln341_2_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_540),64));
    zext_ln341_3_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_reg_555),64));
    zext_ln341_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(g_reg_510),64));
    zext_ln342_1_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_1_reg_530),64));
    zext_ln342_2_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_545),64));
    zext_ln342_3_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_reg_560),64));
    zext_ln342_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_reg_515),64));
    zext_ln343_1_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_reg_535),64));
    zext_ln343_2_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_reg_550),64));
    zext_ln343_3_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_reg_565),64));
    zext_ln343_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_reg_520),64));
end behav;
